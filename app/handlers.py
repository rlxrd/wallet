from aiogram import types, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.database.requests import *
import app.keyboards as kb
import asyncio

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    name = State()
    currency = State()
    amount = State()
    sure = State()


class TopUp(StatesGroup):
    account = State()
    amount = State()
    category = State()
    direction = State()
    sure = State()


class Spend(StatesGroup):
    account = State()
    amount = State()
    category = State()
    direction = State()
    sure = State()


class DeleteAcc(StatesGroup):
    sure = State()

"""

–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—á—ë—Ç.

"""

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—á–µ—Ç
@router.message(Command('start'))
async def start_cmd(message: types.Message, state: FSMContext):
    user_reg = await add_user_db(message.from_user.id)
    if not user_reg:
        await state.set_state(Registration.name)
        await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Pro Wallet!\n\n–ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –í–∞–º —Å —É—á—ë—Ç–æ–º –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ –∏—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –í–∞—à –ø–µ—Ä–≤—ã–π —Å—á—ë—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–æ–π.',
                             reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(f'üí∏ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {message.from_user.first_name}!\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ. üëá', reply_markup= kb.main_kb)


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
@router.callback_query(lambda c: c.data == 'cancel')
async def cancel(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        print('error 1')
    try:
        await state.clear()
    except:
        print('error 2')
    await callback.message.answer(f'üí∏ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {callback.from_user.first_name}!\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ. üëá', reply_markup=kb.main_kb)


"""

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—á—ë—Ç–∞!

"""

@router.message(Registration.name)
async def registration_name(message: types.Message, state: FSMContext):
    if len(message.text) > 18:
        await message.answer('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 18 —Å–∏–º–≤–æ–ª–∞.')
        return
    else:
        await state.update_data(name=message.text)
        await state.set_state(Registration.currency)
        await message.answer(f'‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –±—É–¥–µ—Ç —Å—á—ë—Ç {message.text}? üëá', reply_markup=await kb.all_currencies_kb())


@router.callback_query(Registration.currency)
async def registration_currency(callback: types.CallbackQuery, state: FSMContext):
    if not await check_currency_db(callback.data):
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞... –¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç—É.')
    else:
        await state.update_data(currency=callback.data)
        await state.set_state(Registration.amount)
        await callback.answer(f'–í—ã–±—Ä–∞–Ω–æ.')
        await callback.message.edit_text('‚úÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12.500 üëá')


@router.message(Registration.amount)
async def registration_amount(message: types.Message, state: FSMContext):
    try:
        if 0 <= float(message.text) <= 9999999999999:
            await state.update_data(amount=float(message.text))
            await state.update_data(user=message.from_user.id)
            reg_data = await state.get_data()
            currency = await check_currency_db(reg_data["currency"])
            await state.set_state(Registration.sure)
            await message.answer(f'üîí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {reg_data["name"]}\n–ë–∞–ª–∞–Ω—Å: {reg_data["amount"]} {currency.name}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ üëá', reply_markup=kb.sure)
        else:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
    except Exception as error:
        await message.answer(f'‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 13.200, {error}')    
            

@router.callback_query(lambda c: c.data == 'yesyes', Registration.sure)
async def registration_done(callback: types.CallbackQuery, state: FSMContext):
    reg_data = await state.get_data()
    if await set_account_db(reg_data):
        await callback.message.edit_text(f'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ.', reply_markup=kb.main_kb)
        await state.clear()
    else:
        await callback.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @rlxrd', reply_markup=kb.main_kb)
        await state.clear()


@router.callback_query(lambda c: c.data == 'nono', Registration.sure)
async def registration_canceled(callback: types.CallbackQuery, state: FSMContext):
    user_reg = await add_user_db(callback.from_user.id)
    if not user_reg:
        await state.set_state(Registration.name)
        await callback.message.answer('ü§î –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–æ–π.', reply_markup=ReplyKeyboardRemove())
    else:
        await callback.message.answer(f'üí∏ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {callback.from_user.first_name}!\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ. üëá', reply_markup= kb.main_kb)


"""

–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!

—Å—á–µ—Ç
—Å—É–º–º–∞
–∫–∞—Ç–µ–≥–æ—Ä–∏—è
–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
"""


@router.callback_query(lambda c: c.data == 'topup')
async def topup(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TopUp.account)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.')
    await callback.message.edit_text('üîí –í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è <b>–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>.', reply_markup=await kb.users_accounts_kb(callback.from_user.id))


@router.callback_query(TopUp.account)
async def topup_account(callback: types.CallbackQuery, state: FSMContext):
    acc_data = await check_account_db(callback.data)
    if not acc_data:
        await callback.message.answer('‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
    else:
        try:
            currency_info = await check_currency_db(acc_data.currency)
            await state.update_data(account=callback.data)
            await state.set_state(TopUp.amount)
            await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {acc_data.name}')
            await callback.message.edit_text(f'üîí –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—á—ë—Ç {acc_data.name}.\n\n–í–≤–µ–¥–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ {currency_info.name} –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å. üëá')
        except:
            await callback.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


@router.message(TopUp.amount)
async def topup_amount(message: types.Message, state: FSMContext):
    try:
        if float(message.text) < 9999999999999:
            await state.update_data(amount=float(message.text))
            await state.set_state(TopUp.category)
            await message.answer('üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.', reply_markup= await kb.categiroes_kb(True))
        else:
            await message.answer('‚ùå –ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!')
    except:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 17.145')


@router.callback_query(TopUp.category)
async def topup_category(callback: types.CallbackQuery, state: FSMContext):
    category_check = await check_categories(callback.data)
    if not category_check:
        await callback.message.answer('‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç!')
    else:
        await state.set_state(TopUp.direction)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.', reply_markup= await kb.directions_kb(callback.data))


@router.callback_query(TopUp.direction)
async def topup_directions(callback: types.CallbackQuery, state: FSMContext):
    direct_check = await get_directions(callback.data)
    if not direct_check:
        await callback.message.answer('‚ùå –¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç!')
    else:
        await state.update_data(direction=callback.data)
        await state.set_state(TopUp.sure)
        tdata = await state.get_data()
        await update_balance(tdata["amount"], tdata["account"], tdata["direction"], True)
        await callback.message.edit_text(f'‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ. üëá', reply_markup= kb.main_kb)
        await state.clear()

"""

–°–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å—á–µ—Ç–∞

"""

@router.callback_query(lambda c: c.data == 'myaccounts')
async def my_accounts(callback: types.CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í–∞—à–∏ —Å—á–µ—Ç–∞ üëá', reply_markup= await kb.my_accs(callback.from_user.id))


@router.callback_query(lambda c: c.data.startswith('acc_'))
async def edit_my_acc(callback: types.CallbackQuery):
    acc_id = callback.data.split('_')[1]
    account = await check_account_db(acc_id)
    try:
        cur = await check_currency_db(account.currency)
        await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—á—ë—Ç: {account.name}\n–ë–∞–ª–∞–Ω—Å: {account.balance} {cur.name}\nID: {account.id}', reply_markup= await kb.acc_settings(acc_id))
    except:
        await callback.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        await asyncio.sleep(3)
        await callback.message.edit_text('–í–∞—à–∏ —Å—á–µ—Ç–∞ üëá', reply_markup= await kb.my_accs(callback.from_user.id))


# –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
@router.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_my_acc(callback: types.CallbackQuery, state: FSMContext):
    acc_id = callback.data.split('_')[1]
    account = await check_account_db(acc_id)
    cur = await check_currency_db(account.currency)
    await state.set_state(DeleteAcc.sure)
    await state.update_data(account=acc_id)
    await callback.message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç? {account.name}', reply_markup=kb.sure)


@router.callback_query(lambda c: c.data == 'yesyes', DeleteAcc.sure)
async def edit_my_acc(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await delete_acc(data)
    await callback.message.edit_text('–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
    await state.clear()
    await asyncio.sleep(1.5)
    await callback.message.edit_text('–í–∞—à–∏ —Å—á–µ—Ç–∞ üëá', reply_markup= await kb.my_accs(callback.from_user.id))


@router.callback_query(lambda c: c.data == 'nono', DeleteAcc.sure)
async def edit_my_acc(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        print('error 1')
    try:
        await state.clear()
    except:
        print('error 2')
    await callback.message.answer(f'üí∏ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {callback.from_user.first_name}!\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ. üëá', reply_markup=kb.main_kb)


"""

–ü–û–¢–†–ê–¢–ò–¢–¨

"""

@router.callback_query(lambda c: c.data == 'spend')
async def spend(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Spend.account)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥.')
    await callback.message.edit_text('üîí –í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è <b>—Ä–∞—Å—Ö–æ–¥–∞</b>.', reply_markup= await kb.users_accounts_kb(callback.from_user.id))


@router.callback_query(Spend.account)
async def spend_account(callback: types.CallbackQuery, state: FSMContext):
    acc_data = await check_account_db(callback.data)
    if not acc_data:
        await callback.message.answer('‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
    else:
        currency_info = await check_currency_db(acc_data.currency)
        await state.update_data(account=callback.data)
        await state.set_state(Spend.amount)
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {acc_data.name}')
        await callback.message.edit_text(f'üîí –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—á—ë—Ç {acc_data.name}.\n\n–í–≤–µ–¥–∏—Ç–µ, —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ {currency_info.name}. üëá')


@router.message(Spend.amount)
async def spend_amount(message: types.Message, state: FSMContext):
    try:
        if float(message.text) < 9999999999999:
            await state.update_data(amount=float(message.text))
            await state.set_state(Spend.category)
            await message.answer('üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.', reply_markup= await kb.categiroes_kb(False))
        else:
            await message.answer('‚ùå –ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!')
    except:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 11.100')


@router.callback_query(Spend.category)
async def spend_category(callback: types.CallbackQuery, state: FSMContext):
    category_check = await check_categories(callback.data)
    if not category_check:
        await callback.message.answer('‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç!')
    else:
        await state.set_state(Spend.direction)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.', reply_markup= await kb.directions_kb(callback.data))


@router.callback_query(Spend.direction)
async def spend_directions(callback: types.CallbackQuery, state: FSMContext):
    direct_check = await get_directions(callback.data)
    if not direct_check:
        await callback.message.answer('‚ùå –¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç!')
    else:
        await state.update_data(direction=callback.data)
        await state.set_state(Spend.sure)
        tdata = await state.get_data()
        await update_balance(tdata["amount"], tdata["account"], tdata["direction"], False)
        await callback.message.edit_text(f'‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—á–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ. üëá', reply_markup= kb.main_kb)
        await state.clear()


"""

–ü–†–û–ß–ï–ï

"""

@router.callback_query(lambda c: c.data == 'statistics')
async def stats(callback: types.Message):
    await callback.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')


@router.callback_query(lambda c: c.data == 'settings')
async def stats(callback: types.Message):
    await callback.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')


@router.callback_query(lambda c: c.data == 'premium')
async def stats(callback: types.Message):
    await callback.answer('–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
    

""" 

–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –°–ß–ï–¢–ê!

"""
@router.callback_query(lambda c: c.data == 'add_new_acc')
async def add_new_acc(callback: types.Message, state: FSMContext):
    await state.set_state(Registration.name)
    await callback.message.answer(f'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–æ–π.', reply_markup=kb.cancel_ikb)
